################################################################################
# jupyter lab hub for pgpu1
################################################################################
FROM nvidia/cuda:10.1-devel-ubuntu16.04 

ENV CUDNN_VERSION 7.6.5.32
LABEL com.nvidia.cudnn.version="${CUDNN_VERSION}"

RUN apt-get update && apt-get install -y --no-install-recommends \
    libcudnn7=$CUDNN_VERSION-1+cuda10.1 \
libcudnn7-dev=$CUDNN_VERSION-1+cuda10.1 \
&& \
    apt-mark hold libcudnn7 && \
    rm -rf /var/lib/apt/lists/*

#ARG PYTHON_VERSION=3.6
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        cmake \
        jq \
        ca-certificates \
        supervisor \
        libjpeg-dev \
        libssl-dev \
        libreadline-dev \
        zlib1g-dev \
        language-pack-ja \
        openssh-server \
        ufw \
        curl \
        vim \
        git \
        wget \
        unzip \
        nodejs \
        npm \
        tmux \
        sqlite3 \
        graphviz \
        libpng-dev &&\
     rm -rf /var/lib/apt/lists/*
RUN mkdir /var/run/sshd

ENV CONDA_PATH=/opt/conda
ENV JUPYTER_PATH=/opt/conda/envs/jupyter_env
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PATH /opt/conda/bin:$PATH

RUN apt-get update --fix-missing && apt-get install -y wget bzip2 ca-certificates \
    libglib2.0-0 libxext6 libsm6 libxrender1 \
    git mercurial subversion

RUN wget --quiet https://repo.anaconda.com/archive/Anaconda3-2020.02-Linux-x86_64.sh -O ~/anaconda.sh && \
    /bin/bash ~/anaconda.sh -b -p /opt/conda && \
    rm ~/anaconda.sh && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc

#RUN apt-get install -y curl grep sed dpkg && \
#    TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o "/v.*\"" | sed 's:^..\(.*\).$:\1:'` && \
#    curl -L "https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb" > tini.deb && \
#    dpkg -i tini.deb && \
#    rm tini.deb && \
#    apt-get clean

RUN chmod -R go-w /opt/conda && \
    chmod -R go+rX /opt/conda

# Install ANACONDA Environment
RUN /opt/conda/bin/conda create -y -n jupyter_env python=3.6 anaconda && \
    /opt/conda/bin/conda install cudatoolkit=10.0.130 && \
    /opt/conda/bin/conda install -c conda-forge jupyterhub && \
    /opt/conda/bin/conda install notebook

# install librarlies
ADD requirements.txt /tmp/requirements.txt
RUN /opt/conda/envs/jupyter_env/bin/pip install -r /tmp/requirements.txt

# install yarn
ENV YARN_VERSION 1.13.0
RUN curl -L --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz" > /tmp/yarn.tar.gz && \
  tar -xzf /tmp/yarn.tar.gz -C /opt && \
  ln -s /opt/yarn-v$YARN_VERSION/bin/yarn /usr/local/bin/yarn && \
  ln -s /opt/yarn-v$YARN_VERSION/bin/yarnpkg /usr/local/bin/yarnpkg && \
  rm /tmp/yarn.tar.gz

# add users
RUN useradd -m -g users -s /bin/bash user0 && echo "user0:1qaz2wsx" | chpasswd && gpasswd -a user0 sudo && \
    mkdir -p /home/user0/.ssh; chown user0 /home/user0/.ssh; chmod 700 /home/user0/.ssh && \
    mkdir -p /home/user0/notebook && \
    chown user0:users /home/user0/notebook

RUN useradd -m -g users -s /bin/bash user1 && echo "user1:password" | chpasswd && gpasswd -a user1 sudo && \
    mkdir -p /home/user1/.ssh; chown user1 /home/user1/.ssh; chmod 700 /home/user1/.ssh && \
    mkdir -p /home/user1/notebook && \
    chown user1:users /home/user1/notebook

RUN useradd -m -g users -s /bin/bash user2 && echo "user2:password" | chpasswd && gpasswd -a user2 sudo && \
    mkdir -p /home/user2/.ssh; chown user2 /home/user2/.ssh; chmod 700 /home/user2/.ssh && \
    mkdir -p /home/user2/notebook && \
    chown user2:users /home/user2/notebook

RUN useradd -m -g users -s /bin/bash user3 && echo "user3:password" | chpasswd && gpasswd -a user3 sudo && \
    mkdir -p /home/user3/.ssh; chown user3 /home/user3/.ssh; chmod 700 /home/user3/.ssh && \
    mkdir -p /home/user3/notebook && \
    chown user3:users /home/user3/notebook

RUN useradd -m -g users -s /bin/bash user4 && echo "user4:password" | chpasswd && gpasswd -a user4 sudo && \
    mkdir -p /home/user4/.ssh; chown user4 /home/user4/.ssh; chmod 700 /home/user4/.ssh && \
    mkdir -p /home/user4/notebook && \
    chown user4:users /home/user4/notebook

RUN useradd -m -g users -s /bin/bash user5 && echo "user5:password" | chpasswd && gpasswd -a user5 sudo && \
    mkdir -p /home/user5/.ssh; chown user5 /home/user5/.ssh; chmod 700 /home/user5/.ssh && \
    mkdir -p /home/user5/notebook && \
    chown user5:users /home/user5/notebook

RUN useradd -m -g users -s /bin/bash user6 && echo "user6:password" | chpasswd && gpasswd -a user6 sudo && \
    mkdir -p /home/user6/.ssh; chown user6 /home/user6/.ssh; chmod 700 /home/user6/.ssh && \
    mkdir -p /home/user6/notebook && \
    chown user6:users /home/user6/notebook

# shared cache location （一応マウントするために今の時点で作成）
RUN mkdir -p /home/shared/dvc-cache

# add LD_LIBRARY_PATH for each user 
RUN echo "export PATH=$PATH:'/usr/local/nvidia/bin:/usr/local/cuda/bin'" >> /home/user0/.bashrc && \
    echo "export PATH=$PATH:'/usr/local/nvidia/bin:/usr/local/cuda/bin'" >> /home/user1/.bashrc && \
    echo "export PATH=$PATH:'/usr/local/nvidia/bin:/usr/local/cuda/bin'" >> /home/user2/.bashrc && \
    echo "export PATH=$PATH:'/usr/local/nvidia/bin:/usr/local/cuda/bin'" >> /home/user3/.bashrc && \
    echo "export PATH=$PATH:'/usr/local/nvidia/bin:/usr/local/cuda/bin'" >> /home/user4/.bashrc && \
    echo "export PATH=$PATH:'/usr/local/nvidia/bin:/usr/local/cuda/bin'" >> /home/user5/.bashrc && \
    echo "export PATH=$PATH:'/usr/local/nvidia/bin:/usr/local/cuda/bin'" >> /home/user6/.bashrc
RUN echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:'/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda-10.1/targets/x86_64-linux/lib:/opt/conda/pkgs/cudatoolkit-10.0.130-0/lib:'" >> /home/user0/.bashrc && \
    echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:'/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda-10.1/targets/x86_64-linux/lib:/opt/conda/pkgs/cudatoolkit-10.0.130-0/lib:'" >> /home/user1/.bashrc && \
    echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:'/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda-10.1/targets/x86_64-linux/lib:/opt/conda/pkgs/cudatoolkit-10.0.130-0/lib:'" >> /home/user2/.bashrc && \
    echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:'/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda-10.1/targets/x86_64-linux/lib:/opt/conda/pkgs/cudatoolkit-10.0.130-0/lib:'" >> /home/user3/.bashrc && \
    echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:'/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda-10.1/targets/x86_64-linux/lib:/opt/conda/pkgs/cudatoolkit-10.0.130-0/lib:'" >> /home/user4/.bashrc && \
    echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:'/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda-10.1/targets/x86_64-linux/lib:/opt/conda/pkgs/cudatoolkit-10.0.130-0/lib:'" >> /home/user5/.bashrc && \
    echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:'/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda-10.1/targets/x86_64-linux/lib:/opt/conda/pkgs/cudatoolkit-10.0.130-0/lib:'" >> /home/user6/.bashrc

# install configurable-http-proxy 
#RUN npm cache clean
RUN npm install n -g && \
    n stable && \
    ln -sf /usr/local/bin/node /usr/bin/node && \
    apt-get purge -y nodejs npm && \
    /usr/local/bin/npm install -g configurable-http-proxy

# add jupyter extensions
USER root
RUN /opt/conda/envs/jupyter_env/bin/jupyter labextension install jupyterlab_tensorboard
RUN /opt/conda/envs/jupyter_env/bin/jupyter tensorboard enable --sys-prefix
#RUN jupyter serverextension enable --py jupyterlab_tensorboard
RUN /opt/conda/envs/jupyter_env/bin/jupyter labextension install @jupyterlab/hub-extension
RUN /opt/conda/envs/jupyter_env/bin/jupyter labextension install @lckr/jupyterlab_variableinspector
RUN /opt/conda/envs/jupyter_env/bin/jupyter labextension install @jupyterlab/toc
RUN /opt/conda/envs/jupyter_env/bin/jupyter labextension install @ryantam626/jupyterlab_code_formatter
RUN /opt/conda/envs/jupyter_env/bin/jupyter serverextension enable --py jupyterlab_code_formatter
#RUN /opt/conda/envs/jupyter_env/bin/jupyter labextension install @jupyterlab/git
#RUN /opt/conda/envs/jupyter_env/bin/pip install jupyterlab-git
RUN /opt/conda/envs/jupyter_env/bin/jupyter serverextension enable --py jupyterlab_git --sys-prefix
RUN /opt/conda/envs/jupyter_env/bin/jupyter labextension install @jupyter-widgets/jupyterlab-manager
RUN /opt/conda/envs/jupyter_env/bin/jupyter nbextension enable --py --sys-prefix widgetsnbextension
#RUN /opt/conda/envs/jupyter_env/bin/jupyter labextension install mlflow-extension
RUN /opt/conda/envs/jupyter_env/bin/jupyter lab build

# なぜか以下効果ないので, startup.shでも実施している
RUN find /home/user0/notebook -type f -exec chown user0:users {} \;
RUN find /home/user0/notebook -type d -exec chown user0:users {} \;
RUN find /home/user1/notebook -type f -exec chown user1:users {} \;
RUN find /home/user1/notebook -type d -exec chown user1:users {} \;
RUN find /home/user2/notebook -type f -exec chown user2:users {} \;
RUN find /home/user2/notebook -type d -exec chown user2:users {} \;
RUN find /home/user3/notebook -type f -exec chown user3:users {} \;
RUN find /home/user3/notebook -type d -exec chown user3:users {} \;
RUN find /home/user4/notebook -type f -exec chown user4:users {} \;
RUN find /home/user4/notebook -type d -exec chown user4:users {} \;
RUN find /home/user5/notebook -type f -exec chown user5:users {} \;
RUN find /home/user5/notebook -type d -exec chown user5:users {} \;
RUN find /home/user6/notebook -type f -exec chown user6:users {} \;
RUN find /home/user6/notebook -type d -exec chown user6:users {} \;

# start jupyter process
EXPOSE 8891
ENV SHELL=/bin/bash
WORKDIR /home/user0/notebook
ADD startup2.sh /tmp/startup2.sh
RUN chmod 755 /tmp/startup2.sh
#ENTRYPOINT [ "/usr/bin/tini", "--" ]
CMD ["/tmp/startup2.sh"]
